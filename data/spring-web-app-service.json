[
	{
		"id": "spring-web-app-service-1",
		"question": "Here is an API :<div class=\"code\">https://www.myAPI.com/api/v1/orders/1234</div> Currently, anyone who knows the ID of the order can use this API call with HTTP GET. What security vulnerability are you potentially exposing with this approach?",
		"correct_answer": "Insecure direct object reference (IDOR)",
		"incorrect_answers": [
			"Session fixation",
			"Direct Denial of Service (DDOS)",
			"Cross Site Scripting"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-2",
		"question": "How do you inform Springfox of your Spring API's version in a programmatic manner?",
		"correct_answer": "Set the version property on the ApiInfo object on the Docket.",
		"incorrect_answers": [
			"Set the version property on the Docket directly.",
			"Add a Tag named path on the Docket.",
			"Add a Tag named version on the Docket."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-4",
		"question": "You are deploying a new version of your API after you have made some breaking changes to one version. What URL will allow you to get a specific version of an API through a request parameter?",
		"correct_answer": "https://api.example.com/example-inventory/entity?version=1",
		"incorrect_answers": [
			"GET https://api.example.com/reading-inventory/quizzes",
			"https://api.example.com/example-inventory/entity&version=1",
			"https://api.example.com/example-inventory/v2/entity"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-5",
		"question": "When refactoring a Spring MVC application that uses JSP, you extracted a fragment that represents the header, but you notice that this fragment is accessible outside the web application and you can construct a URL to retrieve it. How can you avoid this?",
		"correct_answer": "Make sure that the fragment has .jspf extension and is placed under /WEB-INF/jspf.",
		"incorrect_answers": [
			"Make sure that the front-end web server blocks all the URLs that correspond to fragments.",
			"Encapsulate the extracted code in a JSP page that do not include the taglib directive.",
			"Make sure that all the fragments are located under /WEB-APP/jspf."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-6",
		"question": "You're working on building an enterprise REST web service which will handle all the Human Resources aspects of your customer. You are now modeling the resources that will be handled by this service, and therefore their URIs as well. How will you model the resource that maps to the set of all employees, ensuring that you follow REST naming conventions?",
		"correct_answer": "employees",
		"incorrect_answers": [
			"listEmployees",
			"getEmployees",
			"get_employees"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-7",
		"question": "What is the main bean that you must configure when setting up Springfox for Swagger 2?",
		"correct_answer": "Docket",
		"incorrect_answers": [
			"Socket",
			"DocumentationType",
			"EnableSwagger2"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-10",
		"question": "Where are the routes defined in Spring MVC compared to other popular web frameworks?",
		"correct_answer": "They are dispersed throughout the whole application.",
		"incorrect_answers": [
			"They are defined as constants in a config class.",
			"They are fetched from a table in the database.",
			"They are externalized in a single configuration file."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-11",
		"question": "Which view resolver should always be positioned as the last resolver in the chain in a Spring MVC application?",
		"correct_answer": "org.springframework.web.servlet.view.InternalResourceViewResolver",
		"incorrect_answers": [
			"org.springframework.web.servlet.view.BeanNameViewResolver",
			"org.springframework.web.servlet.view.ContentNegotiatingViewResolver",
			"org.springframework.web.servlet.view.XmlViewResolver "
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-14",
		"question": "What Spring annotation will help you maintain state for user sessions?",
		"correct_answer": "@SessionAttributes",
		"incorrect_answers": [
			"@UserSessionDetails",
			"@SessionState",
			"@UserSessionStore"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-15",
		"question": "Your Spring MVC application needs an additional CSS file. You have put the resource under webapp/resources and created a Spring mvc:resources mapping, but when you run the project, the CSS is still not loading. What is wrong?",
		"correct_answer": "The CSS is not included in the JSP page.",
		"incorrect_answers": [
			"The CSS code contains an error.",
			"The spring-web-config.xml contains a syntax error.",
			"The static resources should be in the WEB-INF folder."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-16",
		"question": "You are building an API for a restaurant company. There is a possibility for a lot of different types of exceptions to be thrown which you do not have specific exception handlers for. What can you do to handle all the exceptions thrown by application?",
		"correct_answer": "Use the <span class=\"codeAnswer\">@ControllerAdvice</span> annotation on a class to define your global exception handler.",
		"incorrect_answers": [
			"Use the <span class=\"codeAnswer\">@ExceptionHandler</span> annotation to define your global exception handler for all controllers",
			"Create a class with <span class=\"codeAnswer\">public static void main(String[] args)</span> entry point to catch all exceptions.",
			"Use the <span class=\"codeAnswer\">@Global</span> annotation to define your global exception handler for all controllers."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-17",
		"question": "How can you avoid double submission of the same form in Spring MVC?",
		"correct_answer": "By using the RedirectView to implement the Post-Redirect-Get (PRG) pattern",
		"incorrect_answers": [
			"By ensuring that the user does not press the browser’s refresh button",
			"By using a Synchronizer Token to perform validation on both the server and the client",
			"By ensuring that the user does not press the browser’s back button"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-19",
		"question": "Which of the HTTP methods is idempotent?",
		"correct_answer": "PUT",
		"incorrect_answers": [
			"CONNECT",
			"PLACE",
			"POST"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-20",
		"question": "What is the purpose of versioning APIs?",
		"correct_answer": "It allows you to iterate faster when required changes are identified for multiple client integrations.",
		"incorrect_answers": [
			"It ensures the technical quality of your API when you have multiple client integrations.",
			"It ensures users have the proper instructions to update APIs.",
			"It allows your API to be independent of any single communication protocol."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-21",
		"question": "What is the standard procedure by which you would vary the value of the database connection URL on a per-environment basis using functionality offered by Spring?",
		"correct_answer": "Define a database connection URL per profile and activate the profile that is suitable for the environment you're running in.",
		"incorrect_answers": [
			"Define a single database connection URL and edit it at application startup based on the environment you're in, before using it",
			"Define all database connection URLs in each profile and activate the profile that is suitable for the environment you're running in.",
			"Define a database connection URL per profile, load all of them at application startup, regardless of the environment you're in, and try them out sequentially until you find the one that works."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-22",
		"question": "When sending a request to http://yoursite.com/test.jsp you are able to see the contents of the JSP of your Spring MVC application, which poses a security threat. How can you fix this?",
		"correct_answer": "Move test.jsp file under the WEB-INF/ folder.",
		"incorrect_answers": [
			"Restrict all the requests to .jsp files from the security config.",
			"Move test.jsp file under webapp/ folder.",
			"Obfuscate the content of the test.jsp file."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-23",
		"question": "You are creating a website using the Spring framework and want to create a way to access the about page. How can you ensure your main controller links to the /about webpage?",
		"correct_answer": "Place @GetMapping (\"/about\") above a method in the controller class. ",
		"incorrect_answers": [
			"Place @RequestMapping (\"/about\") above the controller class. ",
			"Place @PathMapping (\"/about\") above a method in the controller class. ",
			"Place @UrlMapping(\"/about\") above a method in the controller class."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-24",
		"question": "You issue the same request twice in a row on a RESTful web service:<div class=\"code\">PUT http://localhost:8888/api/v1/object/33</div>Assume that the RESTful web service is up, that the body of the PUT request is valid, and that no resource representation exists at that URL at the time of running these requests. What do you expect to happen on the server?",
		"correct_answer": "<p>The first request returns an HTTP code 201 and succeeds in creating the representation for the resource.</p><p>The second request returns an HTTP code of either 200 or 204 and succeeds in updating the representation for the resource to an identical representation.</p>",
		"incorrect_answers": [
			"<p>The first request returns an HTTP code 200 and succeeds in creating the representation for the resource.</p><p>The second request returns an HTTP code 200 and succeeds in creating another, separate representation for the resource, of identical value.</p>",
			"<p>The first request returns an HTTP code 201 and succeeds in creating the representation for the resource.</p><p>The second request returns an HTTP code 201 and succeeds in creating another, separate representation for the resource, of identical value.</p>",
			"<p>The first request returns an HTTP code 201 and succeeds in creating the representation for the resource.</p><p>The second request returns an HTTP code of 201 and succeeds in updating the representation for the resource to an identical representation.</p>"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-25",
		"question": "You have two versions of an API. One class is APIVersionOne.java and APIVersionTwo.java. You want to use a request parameter to differentiate these versions. What code can you use to call version 1 of the API?",
		"correct_answer": "<div class=\"codeAnswer\"><p>@GetMapping(value = \"/api\", params = \"version=1\")</p><p>public ApiVersionOne paramV1() {</p><p>&nbsp; return new ApiVersionOne(\"String\");</p><p>}</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>@RequestParameter(value = \"/api\", params = \"version=1\")</p><p>public ApiVersionOne paramV1() {</p><p>&nbsp; return new ApiVersionOne(\"String\");</p><p>}</p></div>",
			"<div class=\"codeAnswer\"><p>@GetMapping(parameter = \"/api\", requestParams = \"version=1\")</p><p>public SyntaxV1 ApiVersionOne() {</p><p>&nbsp; return new ApiVersionOne(\"String\");</p><p>}</p></div>",
			"<div class=\"codeAnswer\"><p>@RequestParameter(parameter = \"/api\", request = \"version=1\")</p><p>public ApiVersionOne paramV1() {</p><p>&nbsp; return new ApiVersionOne(\"String\");</p><p>} </p></div>"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-26",
		"question": "What pattern does the DispatcherServlet from Spring MVC framework implement?",
		"correct_answer": "Front Controller Pattern",
		"incorrect_answers": [
			"Model View Controller Pattern",
			"Application Controller Pattern",
			"Page Controller Pattern"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-27",
		"question": "What type of ViewResolver would you use for rendering JSP files in Spring MVC?",
		"correct_answer": "InternalResourceViewResolver ",
		"incorrect_answers": [
			"FreeMarkerViewResolver ",
			"JadeViewResolver ",
			"SpringResourceTemplateResolver"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-28",
		"question": "What can you use from Thymeleaf to create a common layout that can be reused in your Spring MVC application?",
		"correct_answer": "Fragments",
		"incorrect_answers": [
			"Layouts",
			"Chunks",
			"Macros"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-29",
		"question": "What is a disadvantage of having model classes that are also entity classes in a Spring MVC application",
		"correct_answer": "The MVC layer of the application has to deal with transactions.",
		"incorrect_answers": [
			"The same class will be changed multiple times.",
			"The annotations will be persisted in the database.",
			"The Object Relational Mapping ORM layer of the application has to deal with transactions."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-33",
		"question": "The attributes of what Swagger annotation are used to configure custom descriptions on parameters of Spring controller methods?",
		"correct_answer": "@ApiParam ",
		"incorrect_answers": [
			"@SwaggerParam",
			"@RequestParam",
			"@ApiModelProperty"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-34",
		"question": "What is the delegate implementation of the ThemeSource that loads properties file from the root of the classpath in Spring MVC?",
		"correct_answer": "org.springframework.ui.context.support.ResourceBundleThemeSource",
		"incorrect_answers": [
			"org.springframework.ui.context.support.DelegatingThemeSource",
			"org.springframework.web.servlet.theme.ThemeChangeInterceptor",
			"org.springframework.web.servlet.theme.AbstractThemeResolver"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-35",
		"question": "What Spring MVC annotation can you use on a handler method that checks if the server is up and allowing requests?",
		"correct_answer": "<div class=\"codeAnswer\">@RequestMapping(value=\"/check\", method=RequestMethod.OPTIONS)</div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\">@RequestMapping(value=\"/check\", method=RequestMethod.PATCH)</div>",
			"<div class=\"codeAnswer\">@RequestMapping(value=\"/check\", method=RequestMethod.PUT)</div>",
			"<div class=\"codeAnswer\">@RequestMapping(value=\"/check\", method=RequestMethod.TRACE)</div>"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-36",
		"question": "What library can you use to reduce redundant code in your Spring MVC application by creating reusable template-based layouts?",
		"correct_answer": "Apache Tiles",
		"incorrect_answers": [
			"Apache Freemarker",
			"Apache Velocity",
			"Apache Tapestry"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-38",
		"question": "In which folder do you need to place your additional CSS files in a Spring MVC application that uses Thymeleaf as a template engine?",
		"correct_answer": "static",
		"incorrect_answers": [
			"css",
			"resources",
			"templates"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-39",
		"question": "What procedure is followed when you version your API through a custom HTTP header?",
		"correct_answer": "A new header is defined that has the version number in the request. ",
		"incorrect_answers": [
			"The version number is included in the \"Accept\" header. ",
			"The version number in the URL path of the endpoint is included. ",
			"The version number is passed as a query parameter. "
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-40",
		"question": "What exception does Spring throw if no view is returned by any view resolver in the chain?",
		"correct_answer": "ServletException",
		"incorrect_answers": [
			"ServerWebInputException",
			"RuntimeException",
			"ModelAndViewDefiningException"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-42",
		"question": "Which of the following examples of HTTP verbs lacks the idempotence property?",
		"correct_answer": "POST",
		"incorrect_answers": [
			"OPTIONS",
			"PUT",
			"GET"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "spring-web-app-service-43",
		"question": "<p>How would you implement the</p><div class=\"codeAnswer\"><p>@Override</p><p>public void onStartup(ServletContext container) {}</p></div><p>method from the WebApplicationInitializer so that all the requests starting with \"/demo\" are handled by the DispatcherServlet?</p>",
		"correct_answer": "<div class=\"codeAnswer\"><p>ServletRegistration.Dynamic registration = container.addServlet(\"d\", new DispatcherServlet());  </p><p>registration.setLoadOnStartup(1);  </p><p>registration.addMapping(\"/demo/*\");</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();</p><p>DispatcherServlet ds = new DispatcherServlet(ctx);</p><p>ds.getHandlerMappings().add(\"/demo/*\");</p></div>",
			"<div class=\"codeAnswer\"><p>DispatcherServlet ds = new DispatcherServlet(new AnnotationConfigWebApplicationContext());</p><p>ds.setDetectAllHandlerMappings(true);</p><p>ds.setDispatchOptionsRequest(\"/demo/*\");</p></div>",
			"<div class=\"codeAnswer\"><p>DispatcherServlet dispatcherServlet = new DispatcherServlet();</p><p>ServletRegistration.Dynamic registration = container.addServlet(\"d\", dispatcherServlet);</p><p>dispatcherServlet.setContextInitializerClasses(\"/demo/*\");</p></div>"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-44",
		"question": "What Spring annotation allows you to customize the name of an associated entity?",
		"correct_answer": "@RestResource",
		"incorrect_answers": [
			"@ResourceLink",
			"@OneToMany",
			"@OneToOne"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-45",
		"question": "Which of the following is an example of a valid relationship between @SessionAttributes and @ModelAttribute?",
		"correct_answer": "@SessionAttributes lists the names or the types of model attributes that should be stored in a session while @ModelAttribute is used to define and instantiate those attributes.",
		"incorrect_answers": [
			"@SessionAttributes can be applied at class level only, whereas @ModelAttribute can only be applied at class and method level.",
			"@SessionAttributes can be applied at method and class level, whereas @ModelAttribute can only be applied at class level.",
			"The presence of @SessionAttributes indicates that all beans annotated with @ModelAttribute will be stored in the user session while @ModelAttribute is used to define and instantiate those attributes. "
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-46",
		"question": "You are working on a large Spring project that has been live for more than 10 years, and the process is tedious. After some time you notice that the presentation and the domain layers are very tightly coupled and any change you make in the domain requires you to also change the controllers. How can you start refactoring this application in order to decouple the above layers?",
		"correct_answer": "Use Data Transfer Objects (DTO) in the service layer of the application. ",
		"incorrect_answers": [
			"Remove all the application programming interfaces (APIs) and move all the logic in the domain layer.",
			"Create an additional business layer and move the code that interacts with both the presentation and the domain layer there.",
			"Use Data Access Objects (DAO) in the service layer of the application."
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-47",
		"question": "What bean validation reference implementation is Spring using by default?",
		"correct_answer": "Hibernate Validator",
		"incorrect_answers": [
			"Apache Cayenne",
			"JSR 380",
			"Apache Commons Validator"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-48",
		"question": "You implemented classes that provide the base implementation of the HandlerInterceptor interface. The method definition for the preHandle method looks like this:boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)You have returned false in this method and nothing else is continuing to process. Why might this be happening?",
		"correct_answer": "Spring assumes that the request has been processed by the spring interceptor itself and no more processing is required.",
		"incorrect_answers": [
			"The HandlerAdapter has invoked the handler but DispatcherServlet is yet to render the view. ",
			"The handler has been completely executed but has not yet been processed.",
			"Spring assumes that the client request has been cancelled by the HTTP protocol."
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-49",
		"question": "Which HTML tag do we need to use in a form to enable the user to upload a file in a Spring MVC application?",
		"correct_answer": "<div class=\"codeAnswer\">&lt;input type=\"file\" name=\"file\" /&gt;</div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\">&lt;form:label path=\"file\"&gt;</div>",
			"<div class=\"codeAnswer\">&lt;form:form method=\"POST\" action=\"/upload\"&gt;</div>",
			"<div class=\"codeAnswer\">&lt;input type=\"submit\" value=\"Submit\" /&gt;</div>"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-50",
		"question": "<p>The following code snippet is part of the definition of a Spring REST API endpoint:</p><div class=\"code\"><p>@RequestMapping(value = \"/cities\", method = RequestMethod.GET)</p><p>public String getCities(//your answer goes here) {</p><p>&nbsp;&nbsp;//assume a valid method body exists here</p><p>}</p></div> <p>The method returns a list of all cities close to an airport code. The HTTP GET request will provide the airport code value via the airportCode request parameter. How will you specify the extraction of this parameter?</p>",
		"correct_answer": "@RequestParam(value = \"airportCode\") String airportCode ",
		"incorrect_answers": [
			"@RequestParam(key = \"airportCode\") String airportCode",
			"@RequestMapping(key= \"airportCode\") String airportCode",
			"@RequestMapping(value = \"airportCode\") String airportCode"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-51",
		"question": "Which of the following is an example of a Spring annotation that you use when annotating a method mapped to an HTTP GET request?",
		"correct_answer": "@GetMapping",
		"incorrect_answers": [
			"@GETRequest",
			"@GET",
			"@GetRequest"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-52",
		"question": "You are creating Spring MVC controllers with @Controller and are mapping requests with annotations. What code snippet can you use to successfully implement a @PostMapping annotation for a customer endpoint?",
		"correct_answer": "<div class=\"code\"><p>@Controller</p><p>public class CustomerController {</p><p>&nbsp;&nbsp;@PostMapping(path = \"/customers\", consumes = \"application/json\", produces =\"application/json\")</p><p>&nbsp;&nbsp;public void customers(@RequestBody Customer customer) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;// user code here</p><p>&nbsp;&nbsp;}</p><p>}</p></div>",
		"incorrect_answers": [
			"<div class=\"code\"><p>@Controller</p><p>public class CustomerController {</p><p>&nbsp;&nbsp;@PostMapping(@Path(\"/customers\"), consumes = \"application/json\", produces = \"application/json\")</p><p>&nbsp;&nbsp;public void customers(@RequestBody Customer customer) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;// user code here</p><p>&nbsp;&nbsp;}</p><p>}</p></div>",
			"<div class=\"code\"><p>@Controller</p><p>public class HomeController {</p><p>&nbsp;&nbsp;@PostMapping(\"/\")</p><p>&nbsp;&nbsp;public String customers(Model model) {</p><p>&nbsp;&nbsp;   // user code here</p><p>&nbsp;&nbsp;}</p><p>} </p></div>",
			"<div class=\"code\"><p>@Controller</p><p>public class HomeController {</p><p>&nbsp;&nbsp;@PostMapping(@RequestBody)</p><p>&nbsp;&nbsp;public String customers(Model model) {</p><p>&nbsp;&nbsp;   // user code here</p><p>&nbsp;&nbsp;}</p><p>} </p></div>"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-53",
		"question": "You have just made a major update to an API that requires a new version 2.0. This new version needs to exist separately from the 1.0 version using URI Versioning. Which versioning change will allow you to properly implement this new version through URI versioning?",
		"correct_answer": "https://www.exampleapi.com/api/v2/data",
		"incorrect_answers": [
			"https://www.exampleapi.com/api/data?version=2",
			"https://exampleapi-8080/api/v2/data?version=2 ",
			"https://exampleapi-8080/api/v2/data"
		],
		"source": ""
	},
		{
		"id": "spring-web-app-service-54",
		"question": "How would you retrieve a file that has been uploaded from a form in a Spring MVC controller?",
		"correct_answer": "From the handler method parameter @RequestParam(\"file\") MultipartFile file ",
		"incorrect_answers": [
			"From the handler method parameter @RequestParam(\"file\") File file ",
			"By decoding the base64 String representation of the file",
			"By creating a new java.io.File with the path received from the form"
		],
		"source": ""
	},
		{
		"id": "spring-web-app-service-55",
		"question": "Which class provides access to details about a file that has been uploaded from a form in a Spring MVC application?",
		"correct_answer": "MultipartFile ",
		"incorrect_answers": [
			"FilePart",
			"MockMultipartFile",
			"File"
		],
		"source": ""
	},
		{
		"id": "spring-web-app-service-56",
		"question": "Which Spring MVC annotation can you use to make sure that a JSP has all the data it needs to display itself?",
		"correct_answer": "@ModelAttribute",
		"incorrect_answers": [
			"@RequestMapping",
			"@RequestBody",
			"@PathVariable"
		],
		"source": ""
	},
		{
		"id": "spring-web-app-service-57",
		"question": "You're working on implementing a Spring REST API endpoint responsible for handling HTTP DELETE requests. Relative to the base URL of the controller, the endpoint only adds the id path variable of the resource to the actual URL. No actual request parameters are used. How will you annotate the appropriate controller method?",
		"correct_answer": "@DeleteMapping(\"/{id}\")",
		"incorrect_answers": [
			"@RequestMapping(value = \"/id\", method = RequestMethod.DELETE, params = {\"id\"})",
			"@RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE, params = {\"id\"})",
			"@DeleteMapping(\"/id\")"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-58",
		"question": "<p>Given the following Spring code snippet:</p><div class=\"code\"><p>@Controller</p><p>public class RecipeController {</p><p>&nbsp;&nbsp;@RequestMapping(</p><p>&nbsp;&nbsp;&nbsp;&nbsp; value = \"/api/quantities\", </p><p>&nbsp;&nbsp;&nbsp;&nbsp; method = RequestMethod.GET,</p><p>&nbsp;&nbsp;&nbsp;&nbsp; params = {\"recipe\"}</p><p>&nbsp;&nbsp;)</p><p>&nbsp;&nbsp;public String getQuantities(</p><p>&nbsp;&nbsp;&nbsp;&nbsp; @RequestParam(value = \"recipe\") String recipe</p><p>&nbsp;&nbsp;) {</p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//assume valid method code is here</p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;}</p><p>}</p></div><p>When you try to correctly access it from a browser, the request fails and a 404 HTTP status code is returned. How would you fix it by only changing the method?</p>",
		"correct_answer": "Add @ResponseBody before the return type of the method.",
		"incorrect_answers": [
			"Add @RequestBody after the return type of the method.",
			"Add @RequestBody before the return type of the method.",
			"Add @ResponseBody after the return type of the method."
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-60",
		"question": "<p>Which Spring MVC annotation would you add on the following handler method?</p><div class=\"code\"><p>Employee replaceEmployee(@RequestBody Employee newEmployee, @PathVariable Long id) { ... }</p></div>",
		"correct_answer": "@PutMapping(\"/employees/{id}\")",
		"incorrect_answers": [
			"@GetMapping(\"/employees/{id}\")",
			"@PostMapping(\"/employees/{id}\")",
			"@DeleteMapping(\"/employees/{id}\")"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-61",
		"question": "<p>Your company has had a set of different APIs that consumers use. Due to market demands you have frequently been making updates and have had to continuously update the URL (example below).</p><p>https://www.myAPI.com/api/v1/orders/1234</p><p>Currently, anyone who knows the ID of the order can use this API call with HTTP GET. What security vulnerability are you potentially exposing with this approach?</p>",
		"correct_answer": "Insecure direct object reference (IDOR)",
		"incorrect_answers": [
			"Direct Denial of Service (DDOS)",
			"Session fixation",
			"Cross Site Scripting"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-63",
		"question": "You are a software developer working on creating a RESTful web service and you know that this service will be popular, because it's just replacing an already popular existing service. You're therefore building rate limiting functionality into this service. What HTTP status code will you return to a client running into rate limiting?",
		"correct_answer": "429",
		"incorrect_answers": [
			"403",
			"401",
			"418"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-64",
		"question": "What tag do you need to use in the spring-web-config.xml file in order to include additional CSS in your Spring MVC application?",
		"correct_answer": "mvc:resources",
		"incorrect_answers": [
			"mvc:resource-chain",
			"context:component-scan",
			"link href"
		],
		"source": ""
	},
	{
		"id": "spring-web-app-service-65",
		"question": "<p>Given the code snippet below, found in a class annotated with @RestController:</p><div class=\"code\"><p>@RequestMapping(value = \"/cities\", method = RequestMethod.GET)</p><p>public List<ValidCity> getAllCitiesInCounty(</p><p>&nbsp;&nbsp;@RequestParam(value = \"county\") String county</p><p>) {</p><p>&nbsp;&nbsp;//assume valid method body goes here</p><p>}</p></div><p>Assume that the ValidCity type exists and was defined correctly and that a valid method body exists and is also defined correctly. What is your analysis of this endpoint with regards to its ability to return the java.util.List type when responding to a request that accepts any MIME type with JSON content?</p>",
		"correct_answer": "Everything will work fine as it is because Spring will handle the serialization of the java.util.List to JSON.",
		"incorrect_answers": [
			"Everything will work fine as it is only as long as the java.util.List contains a single element.",
			"It requires a produces=application/json attribute in @RequestMapping before it can work.",
			"It requires a produces=java.util.List attribute in @RequestMapping before it can work."
		],
		"source": ""
	}

]