[
	{
		"id": "javascript-core-1",
		"question": "Given the statement <span class=\"code\">let person = 'User1'</span>, the statement person instanceof String is false. What does this mean?",
		"correct_answer": "User1 is a string primitive, and instanceof checks to see what constructor was used to create the item. The String object constructor must be used to create the string for that expression to be true.",
		"incorrect_answers": [
			"String is not a type in JavaScript; there is only the string primitive. instanceof is only used for custom types.",
			"The return value of the constructor used when User1 is evaluated as undefined.",
			"instanceof performs Type coercion if there is no Type specified; because person was initialized without a type, it defaults to Object."
		],
		"source": ""
	},
	{
		"id": "javascript-core-2",
		"question": "What boolean is returned from the following code?<div class=\"code\">Symbol(\"foo\") !== Symbol(\"foo\")</div>",
		"correct_answer": "true",
		"incorrect_answers": [
			"Truthy",
			"Falsy",
			"false"
		],
		"source": ""
	},
	{
		"id": "javascript-core-3",
		"question": "Given a custom object defined with a constructor function, how can you use <span class=\"code\">Object.defineProperty()</span> to create a private key secret that does not show up in property enumeration (for..in, etc)?",
		"correct_answer": "<div class=\"codeAnswer\"><p>Object.defineProperty(this, 'secret', {</p><p>  enumerable: false,</p><p>});</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>Object.defineProperty(this, 'secret', {</p><p>  public: false,</p><p>});</p></div>",
			"<div class=\"codeAnswer\"><p>Object.defineProperty(this, 'secret', {</p><p>  private: true,</p><p>});</p></div>",
			"<div class=\"codeAnswer\"><p>Object.defineProperty(this, 'secret', {</p><p>  hidden: true,</p><p>});</p></div>"
		],
		"source": ""
	},
	{
		"id": "javascript-core-4",
		"question": "Consider this script in the page's head tag: <div class=\"code\"><p>&lt;script&gt;   document.getElementById('theControl').addEventListener('click',</p><p>&nbsp;function (e) { console.warn('clicked'); }</p><p>);</p><p>&lt;/script&gt;</p></div> The  web page is behaving incorrectly. What is the most likely cause of the problem?",
		"correct_answer": "The target element does not exist when this executes.",
		"incorrect_answers": [
			"The script tag is missing a type attribute.",
			"The event object e is not being used.",
			"Event listeners cannot be added before the page is done loading."
		],
		"source": ""
	},
	{
		"id": "javascript-core-5",
		"question": "How can you recreate the following string with a line break into a template literal?<div class=\"code\">console.log('string text line 1 '+'\\n'+'string text line 2');</div>",
		"correct_answer": "<div class=\"codeAnswer\"><p>console.log(`string text line 1</p><p>string text line 2`);</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\">console.log(`string text line 1 /n string text line 2`);</div>",
			"<div class=\"codeAnswer\">console.log(`string text line 1 ${''} string text line 2`);</div>",
			"<div class=\"codeAnswer\">console.log(`string text line 1 string text line 2`);</div>"
		],
		"source": ""
	},
	{
		"id": "javascript-core-7",
		"question": "Which is considered a \"truthy\" value?",
		"correct_answer": "{}",
		"incorrect_answers": [
			"NaN",
			"\"\"",
			"0"
		],
		"source": "",
		"explanation": "<p>A truthy value simply means a value that is considered true when evaluated in a boolean context (Mozilla Developer Network)</p><p>Any primitive type will evaluate to true in JavaScript, with the exception of the following 7 values, which are called falsy values:</p><p>the number 0</p><p>the BigInt 0n</p><p>the keyword null</p><p>the keyword undefined</p><p>the boolean false</p><p>the number NaN</p><p>the empty string \"\" (equivalent to `` or ‘’)</p>"
	},
	{
		"id": "javascript-core-8",
		"question": "What does the next method of an iterable object return?",
		"correct_answer": "An object with value and done properties",
		"incorrect_answers": [
			"An array with two values",
			"Itself",
			"An object with a next method"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-9",
		"question": "What static method defines setters, getters, and other configurations for a new or existing property on an object?",
		"correct_answer": "Object.defineProperty()",
		"incorrect_answers": [
			"Object.prototype.Property()",
			"Object[\"setProperty\"]()",
			"Property.declare()"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-10",
		"question": "What is returned from the Object.assign() method?",
		"correct_answer": "The target value",
		"incorrect_answers": [
			"The source value",
			"A boolean value",
			"A string value"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-11",
		"question": "What is a valid identifier?",
		"correct_answer": "first$name",
		"incorrect_answers": [
			"first-name",
			"first+name",
			"2ndName"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-12",
		"question": "You defined two promises that will each take different amounts of time to execute. You would like to see which promise will execute faster by executing console.log() on the variable result. What code option can you use to accomplish this?",
		"correct_answer": "var result = Promise.race([promise1, promise2]);",
		"incorrect_answers": [
			"var result = Promise.resolve(promise1) + Promise.resolve(promise2);",
			"var result = Promise.finally(promise1, promise2).result;",
			"var result = Promise.result([promise1, promise2]).status;"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-13",
		"question": "Given that the sine of 90 degrees is 1, what is the result of the following code?let foo = Math.sin(90);",
		"correct_answer": "Not 1, because Math.sin() expects the parameter to be in radians",
		"incorrect_answers": [
			"A ValueError will be thrown; Math.sin() expects a second argument specifying degrees or radians",
			"A ReferenceError will be thrown; trigonometry functions are meant to be called at a global scope:let foo = sin(90)",
			"1"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-14",
		"question": "What syntax is required for named imports that default imports do not use?",
		"correct_answer": "Curly braces around the imported item(s)",
		"incorrect_answers": [
			"The name of the imported item",
			"The from keyword",
			"The name of the module"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-15",
		"question": "You want to create a unique identifier named ident for a single object named object1. You must ensure that this identifier cannot be recreated or mutated. What code option would accomplish this?",
		"correct_answer": "let ident = Symbol(object1)",
		"incorrect_answers": [
			"let ident = String(object1)",
			"let ident = Typeof(object1)",
			"let ident = Identifier(object1)"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-16",
		"question": "What is the value of the variable result? <div class=\"code\"><p>const valueOne = \"2\";</p><p>const valueTwo = \"2\";</p><p>const result = valueOne / valueTwo;</p></div>",
		"correct_answer": "1",
		"incorrect_answers": [
			"\"22\"",
			"NaN",
			"Error"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-17",
		"question": "The following code is intended to guard against undefined being provided to the function while also allowing any string to pass through. What valid values of x would unexpectedly satisfy the conditional? <div class=\"code\"><p>function foo(x) {</p><p>&nbsp;if (x == undefined) {</p><p>&nbsp;&nbsp;console.log(\"A value must be provided for 'x'\");</p><p>&nbsp;&nbsp;return;</p><p>&nbsp;}</p><p>&nbsp;return x;</p><p>}</p></div>",
		"correct_answer": "null",
		"incorrect_answers": [
			"Only Unicode strings",
			"Empty strings",
			"All strings"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-18",
		"question": "You are looking for a method to change the behavior of objects and functions in your code. You implement a proxy. What is the first step you would take to do so?",
		"correct_answer": "let proxy = new Proxy() and then add target and handler inputs",
		"incorrect_answers": [
			"let proxy = new Proxy() and then add target and function inputs",
			"let proxy = create Proxy() and then add target and handler inputs ",
			"let proxy = create Proxy() and then add handler and function inputs"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-19",
		"question": "You frequently use third-party libraries in your JavaScript code. What is a way that an attacker could cause Prototype Pollution?",
		"correct_answer": "The attacker could provide JSON data in the third-party code that has the __proto__ property.",
		"incorrect_answers": [
			"The attacker could allow for application security testing prior to code execution.",
			"The attacker could enable a Subresource Integrity (SRI) to enter into the third-party code.",
			"The attacker could refrain from using any merge or clone operations on JSON objects."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-20",
		"question": "What is wrong with the following Set code snippet? <div class=\"code\"><p>let mySet = new Set();</p><p>mySet.set('23');</p></div>",
		"correct_answer": "Sets use \"add\" to append new values.",
		"incorrect_answers": [
			"Sets can only be created from arrays.",
			"The set can only take primitive values, so 23 must be cast to an integer first.",
			"Only Maps can have values added to them."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-21",
		"question": "What iterable method executes a callback on every item and returns undefined?",
		"correct_answer": "<span class=\"codeAnswer\">.forEach((e) => {})</span>",
		"incorrect_answers": [
			"<span class=\"codeAnswer\">.filter((e) => {})</span>",
			"<span class=\"codeAnswer\">.list((e) => {})</span>",
			"<span class=\"codeAnswer\">.map((e) => {})</span>"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-22",
		"question": "What built-in browser object can you use to perform an AJAX request to a server?",
		"correct_answer": "XMLHttpRequest",
		"incorrect_answers": [
			"AJAXRequest",
			"HttpRequest",
			"window.AJAX()"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-23",
		"question": "You created a new promise function that returns a rejected status every time the promise function is executed. Given the following code, why are the statements after the reject() function not executed? <div class=\"code\"><p>let p = new Promise(function(resolve, reject) {</p><p>&nbsp;resolve(\"successful!\");</p><p>&nbsp;reject(new Error(\" This parameter is invalid\"));</p><p>&nbsp;let isError = \"1\";</p><p>});</p></div>",
		"correct_answer": "Only one instance of resolve or reject can be called by the code. Anything after is ignored by the promise function.",
		"incorrect_answers": [
			"The statements after the reject function are not enumerable and cannot be executed by a promise.",
			"The promise function cannot calculate the return values of the statements after the reject function because they are nullable.",
			"Statements after the reject function are not referencing a promise object, so a promise cannot be executed on them."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-24",
		"question": "What is the value of \"x\" after the following snippet executes? <div class=\"code\">var x, y = 42;</div>",
		"correct_answer": "undefined",
		"incorrect_answers": [
			"SyntaxError",
			"null",
			"42"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-25",
		"question": "You are using the comparison operator to compare two different primitive symbols in JavaScript called sym1 and sym2. What would be the output of the following code?<div class=\"code\">sym1 === sym2</div>",
		"correct_answer": "A return of false because Symbols are unique identifiers",
		"incorrect_answers": [
			"A return of true because Symbols are not unique identifiers",
			"A return of true because Symbols are unique identifiers",
			"A return of false because Symbols are not unique identifiers"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-26",
		"question": "How can you create a function that will invoke immediately?",
		"correct_answer": "<div class=\"codeAnswer\"><p>(function() {</p><p>&nbsp; statements</p><p>})();</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>function() {</p><p>&nbsp; statements</p><p>}();</p></div>",
			"<div class=\"codeAnswer\"><p>function() {</p><p>&nbsp; statements</p><p>};</p></div>",
			"<div class=\"codeAnswer\"><p>(function() {</p><p>&nbsp; statements</p><p>});</p></div>"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-27",
		"question": "You must refactor some JavaScript code that was written for ES5, as follows: <div class=\"code\"><p>var obj1 = {\"color\": \"blue\", \"model\": \"Model1\", \"make\": \"Brand1\"};</p><p>var list = [];</p><p>for(var prop in obj1) {</p><p>&nbsp;list.push(obj1[prop]);</p><p>}</p><p>console.log(list);</p></div> How can you refactor away from the for loop and use a more efficient, up-to-date method?",
		"correct_answer": "Pass obj1 as a parameter to the Object.values() method and embed the Object.values() method inside a console.log() statement.",
		"incorrect_answers": [
			"Pass the two methods obj1.keys() and obj1.values() to a console.log() statement.",
			"Embed the obj1.keys() method inside a while loop incrementing the enumerable value at the end of the loop.",
			"Embed the obj1.keys() method inside a foreach statement."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-28",
		"question": "What scenario would allow you to declare a new object using object literal property shorthand?",
		"correct_answer": "Variable values are defined that match an object's property names.",
		"incorrect_answers": [
			"Variable values contain return data from a setter function.",
			"Variable values contain return data from a getter function.",
			"Variable names have been initialized to zero."
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-29",
		"question": "Which snippet will set up iterator1 for the following behavior? <div class=\"code\">console.log(iterator1.next().value); //42</div>",
		"correct_answer": "<div class=\"code\"><p>let set1 = new Set();</p><p>set1.add(42);</p><p>const iterator1 = set1.values();</p></div>",
		"incorrect_answers": [
			"<div class=\"code\"><p>let set1 = new Set();</p><p>set1.add(42);</p><p>const iterator1 = set1.allKeys();</p></div>",
			"<div class=\"code\"><p>let set1 = new Set();</p><p>set1.add(42);</p><p>const iterator1 = set1.properties();</p></div>",
			"<div class=\"code\"><p>let set1 = new Set();</p><p>set1.add(42);</p><p>const iterator1 = set1.getValues();</p></div>"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-30",
		"question": "What is the result of this code snippet? <div class=\"code\"><p>let FIRST = 'User';</p><p>let LAST = 'One';</p><p>let FIRST&LAST = FIRST + LAST;</p><p>console.log(FIRST&LAST);</p></div>",
		"correct_answer": "It throws a SyntaxError",
		"incorrect_answers": [
			"2",
			"'User' 'One'",
			"UserOne"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-31",
		"question": "What primitive type is the variable result?<div class=\"code\">const result = NaN</div>",
		"correct_answer": "Number",
		"incorrect_answers": [
			"Symbol",
			"String",
			"Boolean"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-32",
		"question": "What parameters does the function object.defineProperty() accept?",
		"correct_answer": "obj, prop, descriptor",
		"incorrect_answers": [
			"index, value",
			"object, key",
			"success, failure, error"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-33",
		"question": "What will the following code snippet return?<div class=\"code\"><p>function square(n) { </p><p>&nbsp; n * n; </p><p>}</p><p>square(5);</p></div>",
		"correct_answer": "undefined",
		"incorrect_answers": [
			"10",
			"null",
			"25"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-34",
		"question": "What would happen if you try to create a new object from a class with multiple constructor methods?",
		"correct_answer": "A syntax error will be thrown",
		"incorrect_answers": [
			"A fatal error with be thrown",
			"A segmentation fault will occur",
			"An infinite loop will run"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-35",
		"question": "What is the output of iterating over the following Set?<div class=\"code\"><p>let set = new Set(\"food\");</p><p>for (let item of set) console.log(item);</p></div>",
		"correct_answer": "<p>f</p><p>o</p><p>d</p>",
		"incorrect_answers": [
			"<p>f</p><p>o</p><p>o</p><p>d</p>",
			"<p>[f, f]</p><p>[o, o]</p><p>[o, o]</p><p>[d, d]</p>",
			"<p>[f, f]</p><p>[o, o]</p><p>[d, d]</p>"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-36",
		"question": "Which code snippet declares a new property called prop on obj1, defined below, that can be changed with the assignment operator?<div class=\"code\">const obj1 = {};</div>",
		"correct_answer": "<div class=\"codeAnswer\"><p>Object.defineProperty(obj1, 'prop', {</p><p>&nbsp; writable: true,</p><p>&nbsp; configurable: true,</p><p>});</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>Object.defineProperty(obj1, 'prop', {&nbsp; </p><p>&nbsp; assignment: true,</p><p>&nbsp; enumerable: false,</p><p>});</p></div>",
			"<div class=\"codeAnswer\"><p>Object.defineProperty(obj1, 'prop', {&nbsp; </p><p>&nbsp; enumerable: true,&nbsp; </p><p>&nbsp; configurable: true,</p><p>});</p></div>",
			"<div class=\"codeAnswer\"><p>Object.defineProperty(obj1, 'prop', {</p><p>&nbsp; enumerable: true,&nbsp; </p><p>&nbsp; configurable: true,&nbsp; </p><p>&nbsp; writable: false</p><p>}); </p></div>"
		],
		"source": "",
		"explanation": ""
	},
	{
		"id": "javascript-core-37",
		"question": "You have two objects with multiple objects nested inside. What is the best approach for determining if these objects are equal (have the same shape and values)?",
		"correct_answer": "Iterate through the object, key by key, and assert strict equality === on every corresponding value. Iterate through all the nested objects to do the same until you find a missing key:value pair or confirm equality.",
		"incorrect_answers": [
			"Use Object.deepEquals(), a function brought over from JavaScript libraries in ECMAScript 2017.",
			"Use the deep-equals operator (===) in strict mode. This will automatically compare each corresponding nested object.",
			"Use Object.is(), the built-in comparison function for JavaScript objects."
		],
		"source": ""
	},
	{
		"id": "javascript-core-38",
		"question": "What object is returned when you call Map.prototype.entries()?",
		"correct_answer": "An iterator",
		"incorrect_answers": [
			"A WeakMap",
			"A generator",
			"An array"
		],
		"source": ""
	},
	{
		"id": "javascript-core-39",
		"question": "<p>A web page is behaving incorrectly. The issue has been tracked back to this script tag in the page's \"head\" tag. What is the most likely cause of the problem?</p><div class=\"code\"><p>&lt;script&gt;   </p><p>document.getElementById('theControl').addEventListener('click',</p><p>&nbsp;&nbsp;function (e) { console.warn('clicked'); }</p><p>);</p><p>&lt;\/script&gt;</p></div>",
		"correct_answer": "The target element does not exist when this executes.",
		"incorrect_answers": [
			"The script tag is missing a type attribute.",
			"The event object e is not being used.",
			"Event listeners cannot be added before the page is done loading."
		],
		"source": ""
	},
	{
		"id": "javascript-core-40",
		"question": "If an iterator never returns {done: true} what is the result?",
		"correct_answer": "The iterator will run infinitely.",
		"incorrect_answers": [
			"The iterator will always yield the same value for all calls made to .next().",
			"The iterator will only run for the initial step when .next() is called first.",
			"The iterator will always return the value false."
		],
		"source": ""
	},
	{
		"id": "javascript-core-41",
		"question": "You must tag a template literal for some code you are writing in JavaScript. How would you accomplish this using raw strings?",
		"correct_answer": "Use the String.raw() method for the template literal.",
		"incorrect_answers": [
			"Use the String.tag() method for the template literal.",
			"Use the Raw.string() method for the template literal.",
			"Use the Tag.string() for the template literal."
		],
		"source": ""
	},
	{
		"id": "javascript-core-42",
		"question": "<p>Which answer completes the following code snippet return statement and correctly emulates a private method by the use of a closure?</p><div class=\"code\"><p>const counter = (function() {</p><p>&nbsp;&nbsp;let privateCounter = 0;</p><p>&nbsp;&nbsp;function changeBy(val) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp; privateCounter += val;</p><p>&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp; // COMPLETE THE CODE SNIPPET</p><p>&nbsp;&nbsp;};</p><p>})(); counter.value();counter.increment();</p></div>",
		"correct_answer": "<div class=\"codeAnswer\"><p>increment: function() { changeBy(1); },</p><p>value: function() { return privateCounter; }</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>privateCounter;</p></div>",
			"<div class=\"codeAnswer\"><p>increment: function() { changeBy(); },</p><p>value: 0,</p></div>",
			"<div class=\"codeAnswer\"><p>increment: function() { changeBy(); },</p><p>value: function() { return privateCounter; }</p></div>"
		],
		"source": ""
	},
	{
		"id": "javascript-core-43",
		"question": "What data type is a symbol in JavaScript?",
		"correct_answer": "Primitive data type",
		"incorrect_answers": [
			"Composite data type",
			"Reference data type",
			"Special data type"
		],
		"source": ""
	},
	{
		"id": "javascript-core-44",
		"question": "What is one method for stopping exploitations of an object and preventing Prototype Pollution?",
		"correct_answer": "Object.freeze()",
		"incorrect_answers": [
			"Object.hold()",
			"Object.halt()",
			"Object.stop()"
		],
		"source": ""
	},
	{
		"id": "javascript-core-45",
		"question": "What is the difference between a property and a method in a class?",
		"correct_answer": "A property is an association between a name and a value; a method is when a function is the value of a property.",
		"incorrect_answers": [
			"A property is only declarable on objects, not classes; a method is declarable only on classes, not objects.",
			"A property does not have access to the this object; a method creates a scope with access to the parent's this object, and are more suited for calculated virtual properties.",
			"Properties and methods are indistinguishable in the ES6 class spec; properties can be methods and methods can be properties."
		],
		"source": ""
	},
	{
		"id": "javascript-core-46",
		"question": "A web app has a performance-impacting function, impactFoo(), that is called around the same time that a series of async, await AJAX function calls reach completion. How can the function be deferred to be called after any pending event handlers to avoid blocking the application?",
		"correct_answer": "setTimeout(impactFoo, 0);",
		"incorrect_answers": [
			"setIntervalTimer(impactFoo, 1);",
			"window.addEventListener(\"impactFoo\", () => { impactFoo() });",
			"deferTask(impactFoo);"
		],
		"source": ""
	},
	{
		"id": "javascript-core-47",
		"question": "What static method defines setters, getters, and other configurations for a new or existing property on an object?",
		"correct_answer": "Object.defineProperty()",
		"incorrect_answers": [
			"Object[\"setProperty\"]()",
			"Property.declare()",
			"Object.prototype.Property()"
		],
		"source": ""
	},
	{
		"id": "javascript-core-48",
		"question": "<p>What is printed to the console when a web page loads the following scripts?</p><div class=\"code\"><p>&lt;script&gt;  </p><p>var foo = 27;  </p><p>(function () {    </p><p>&nbsp;&nbsp;foo = 42;  </p><p>})();</p><p>&lt;/script&gt;</p><p></p><p>&lt;script&gt;  </p><p>console.log(window.foo);</p><p>&lt;/script&gt;</p></div>",
		"correct_answer": "42",
		"incorrect_answers": [
			"null",
			"undefined",
			"27"
		],
		"source": ""
	},
	{
		"id": "javascript-core-49",
		"question": "You must create a class prototype property that keeps a count of how many instances of the class have been created. Which code option demonstrates how to handle this scenario?",
		"correct_answer": "<div class=\"codeAnswer\"><p>class Chips {</p><p>&nbsp;&nbsp;constructor(param1) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;this.param1 = param1;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;if (Chips.prototype.count) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chips.prototype.count++;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;} else {</p><p>&nbsp;&nbsp;&nbsp;&nbsp; Chips.prototype.count = 1;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>class Chips {</p><p>constructor(param1) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;this.param1 = param1;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;this.prototype.count++;</p><p>&nbsp;&nbsp;}</p><p>}</p></div>",
			"<div class=\"codeAnswer\"><p>class Chips {</p><p>&nbsp;&nbsp;constructor(param1) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;this.param1 = param1;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;if (Chips.get(count)) { </p><p>&nbsp;&nbsp;&nbsp;&nbsp;  Chips.set(count++);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;} else {</p><p>&nbsp;&nbsp;&nbsp;&nbsp; Chips.set(count, 0);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p></div>",
			"<div class=\"codeAnswer\"><p>class Chips {</p><p>&nbsp;&nbsp;constructor(param1) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;this.param1 = param1;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Chips.count++;</p><p>&nbsp;&nbsp;}</p><p>}</p></div>"
		],
		"source": ""
	},
	{
		"id": "javascript-core-50",
		"question": "What static method allows the inheritance of an object's prototype in the creation of a new object?",
		"correct_answer": "Object.create()",
		"incorrect_answers": [
			"let newObject = new oldObject.prototype()",
			"Object.inherit()",
			"Object.prototype.inherit()"
		],
		"source": ""
	},
	{
		"id": "javascript-core-51",
		"question": "<p>What will the following code print to the console?</p><div class=\"code\"><p>switch (\"42\") {</p><p>&nbsp;&nbsp;case 42: </p><p>&nbsp;&nbsp;&nbsp;&nbsp;console.log('foo');</p><p>&nbsp;&nbsp;case \"42\":</p><p>&nbsp;&nbsp;&nbsp;&nbsp;console.log('bar');</p><p>&nbsp;&nbsp;default:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;console.log('baz');</p><p>}</p></div>",
		"correct_answer": "<p>bar</p><p>baz</p>",
		"incorrect_answers": [
			"<p>bar</p>",
			"<p>foo</p>",
			"<p>foo</p><p>bar</p><p>baz</p>"
		],
		"source": ""
	},
	{
		"id": "javascript-core-52",
		"question": "What method determines if two values are the same?",
		"correct_answer": "Object.is()",
		"incorrect_answers": [
			"data.cal()",
			"data.isEqual()",
			"var.compare()"
		],
		"source": ""
	},
	{
		"id": "javascript-core-53",
		"question": "What is the correct syntax for accessing the arguments object inside a function?",
		"correct_answer": "function square(n) { arguments }",
		"incorrect_answers": [
			"function square(n) { self.arguments }",
			"function square(n) { window.arguments }",
			"function square(n) { this.arguments }"
		],
		"source": ""
	},
	{
		"id": "javascript-core-54",
		"question": "<div class=\"code\"><p>function foo() {</p><p>&nbsp;&nbsp;var a = 42;</p><p>&nbsp;&nbsp;(function() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;a = 27;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;console.log(a);</p><p>&nbsp;&nbsp;})();</p><p>&nbsp;&nbsp;console.log(a);</p><p>}</p><p>foo();</p></div>",
		"correct_answer": "<p>27</p><p>27</p>",
		"incorrect_answers": [
			"<p>27</p><p>42</p>",
			"<p>27</p><p>undefined</p>",
			"<p>42</p><p>42</p>"
		],
		"source": ""
	},
	{
		"id": "javascript-core-55",
		"question": "Bar is a constructor function and Bar.prototype must inherit the prototype of another object. However, Bar must display something different when its inherited property function, foo(), is invoked. How can you do this?",
		"correct_answer": "By overloading the property at the prototype level:Bar.prototype.foo = function() { //new foo() body }",
		"incorrect_answers": [
			"By reassigning foo:Bar.foo = function(){ //new foo() body }",
			"By overloading the object's property using the ES6 overload keyword:overload Bar.foo = function(){ //new foo() body }",
			"By instantiating Bar without the class keyword"
		],
		"source": ""
	},
	{
		"id": "javascript-core-56",
		"question": "Which code snippet correctly shows unpacking the arguments object into an array?",
		"correct_answer": "Array.from(arguments)",
		"incorrect_answers": [
			"[arguments]",
			"arguments.toArray()",
			"Array.toArray(arguments)"
		],
		"source": ""
	},
	{
		"id": "javascript-core-57",
		"question": "How would you make a new key flavor equal to sweet in a Map called food?",
		"correct_answer": "food.set('flavor', 'sweet');",
		"incorrect_answers": [
			"food.create('flavor', 'sweet');",
			"food['flavor'] = 'sweet';",
			"food.add('flavor', 'sweet');"
		],
		"source": ""
	},
	{
		"id": "javascript-core-58",
		"question": "<p>How would you remove the duplicates from the following array using the spread operator?</p><div class=\"code\"><p>let array = [0, 1, 1, 2, 3, 4, 4];</p></div>",
		"correct_answer": "let noDups = [...new Set(array)];",
		"incorrect_answers": [
			"let noDups = [new Set(array...)];",
			"let noDups = [new Set(...array)];",
			"let noDups = [...array.unique()];"
		],
		"source": ""
	},
	{
		"id": "javascript-core-59",
		"question": "When inheriting from a parent class, what does the super keyword do in the child's constructor?",
		"correct_answer": "super invokes the parent's constructor, and by extension, defines the lexical context and this object for the child class.",
		"incorrect_answers": [
			"super instantiates the parent class and copies the properties over as virtual properties on the child class.",
			"super instantiates the parent class and deep copies the properties over to the child class.",
			"super invokes the parent constructor, and then performs a deep copy of the parent properties over to the child class to make a wholly new object."
		],
		"source": ""
	},
	{
		"id": "javascript-core-60",
		"question": "How can data be provided to a running generator?",
		"correct_answer": "Pass it as a parameter to the next method call.",
		"incorrect_answers": [
			"Call the generator's update method.",
			"Call the generator's reset method.",
			"Call the generator's set method."
		],
		"source": ""
	},
	{
		"id": "javascript-core-61",
		"question": "Assuming no defer or async usage, why might you place a script tag at the end of the body tag rather than at the end of the head?",
		"correct_answer": "Placing it in the head tag blocks parsing of the site until the script has loaded.",
		"incorrect_answers": [
			"Placing it in the body tag allows site parsing to continue even while the script is loading.",
			"Placing it in the head tag allows site parsing to continue even while the script is loading.",
			"Placing it in the body tag blocks parsing of the whole body tag until the script is at least 50% loaded."
		],
		"source": ""
	},
	{
		"id": "javascript-core-62",
		"question": "Given a complex object, foo, with keys that are not known ahead of time, how can you check if a given key, \"k\", is in the object without iterating through the whole object?",
		"correct_answer": "\"k\" in foo",
		"incorrect_answers": [
			"foo contains k",
			"...foo == k",
			"foo.apply(k)"
		],
		"source": ""
	},
	{
		"id": "javascript-core-63",
		"question": "<p>What would you call to create an array from the following Map object?</p><div class=\"code\"><p>let myMap = new Map();</p><p>myMap.set('item1','Foo');</p><p>myMap.set('item2','Bar');</p></div>",
		"correct_answer": "Array.from(myMap.entries());",
		"incorrect_answers": [
			"Array.from(myMap.items());",
			"Array.convert(MyMap);",
			"Array.convert(MyMap.entries());"
		],
		"source": ""
	},
	{
		"id": "javascript-core-64",
		"question": "When creating a class, how can you define a method that is not accessible from an instance of that class, but instead only callable directly on the class?",
		"correct_answer": "<p>Using the static keyword:</p><div class=\"code\"><p>class Foo {</p><p>&nbsp;&nbsp;static logFoo(f){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;console.log(f);</p><p>&nbsp;&nbsp;}</p><p>}</p></div>",
		"incorrect_answers": [
			"<p>Overloading the prototype of the class declaration:</p><div class=\"code\"><p>Foo.logFoo = (f) => { console.log(f) }</p></div>",
			"<p>Using a getter and setter:</p><div class=\"code\"><p>class Foo {</p><p>&nbsp;&nbsp;get bar(){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return this.bar;</p><p>&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;set bar(s){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;this.bar = s;</p><p>&nbsp;&nbsp;}</p><p>}</p></div>",
			"<p>Using the private keyword:</p><div class=\"code\"><p>class Foo {</p><p>&nbsp;&nbsp;constructor(bar){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;this.bar = bar;</p><p>&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;private logFoo(){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.bar);</p><p>&nbsp;&nbsp;}</p><p>}</p></div>"
		],
		"source": ""
	},
	{
		"id": "javascript-core-65",
		"question": "What is the best way to ensure that any variable is declared before it is used?",
		"correct_answer": "By enabling strict mode",
		"incorrect_answers": [
			"By using let instead of var to declare variables",
			"By looking for warnings in the console when running the program",
			"By establishing a coding standard to mandate declaring variables"
		],
		"source": ""
	},
	{
		"id": "javascript-core-66",
		"question": "<p>Given the following results:</p><div class=\"code\"><p>evaluate('2', '2');  // 4</p><p>evaluate(true, false);  // 0</p></div><p>Which implementation of evaluate returns the correct result?</p>",
		"correct_answer": "<div class=\"codeAnswer\"><p>function evaluate(first, second) { </p><p>&nbsp;&nbsp;return first * second;</p><p>}</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>function evaluate(first, second) { </p><p>&nbsp;&nbsp;if (typeof first === string) { </p><p>&nbsp;&nbsp;&nbsp;&nbsp;return 4;</p><p>&nbsp;&nbsp;} </p><p>&nbsp;&nbsp;return first / second;</p><p>}</p></div>",
			"<div class=\"codeAnswer\"><p>function evaluate(first, second) { </p><p>&nbsp;&nbsp;return first + second;</p><p>}</p></div>",
			"<div class=\"codeAnswer\"><p>function evaluate(first, second) { </p><p>&nbsp;&nbsp;if (typeof first === boolean) { </p><p>&nbsp;&nbsp;&nbsp;&nbsp;return 0;</p><p>&nbsp;&nbsp;} </p><p>&nbsp;&nbsp;return first + second;</p><p>}</p></div>"
		],
		"source": ""
	},
	{
		"id": "javascript-core-67",
		"question": "What properties are iterated over when using a for...in loop?",
		"correct_answer": "An object's own, and its inherited, enumerable properties",
		"incorrect_answers": [
			"All of an object's properties",
			"An object's owned properties",
			"An object's public properties"
		],
		"source": ""
	},
	{
		"id": "javascript-core-68",
		"question": "You worry that using an eval() function to evaluate code in JavaScript will allow malicious parties to infiltrate your system. What is a safer method you can use instead?",
		"correct_answer": "Function()",
		"incorrect_answers": [
			"uneval()",
			"new String()",
			"evaluate()"
		],
		"source": ""
	},
	{
		"id": "javascript-core-69",
		"question": "When implementing an iterable protocol on an object, what property is the iterable protocol function defined to?",
		"correct_answer": "Symbol.iterator",
		"incorrect_answers": [
			"custom.iterator",
			"iterator",
			"__proto__.iterator"
		],
		"source": ""
	},
	{
		"id": "javascript-core-70",
		"question": "<p>What does the following code snippet output to the console?</p><div class=\"code\"><p>let x = { \"id\": \"val\" };</p><p>let y = { \"id\": \"val\" };</p><p>console.log(x === y);</p><p>console.log(x == y);</p></div>",
		"correct_answer": "<p>false</p><p>false</p>",
		"incorrect_answers": [
			"<p>true</p><p>false</p>",
			"<p>false</p><p>true</p>",
			"<p>true</p><p>true</p>"
		],
		"source": ""
	},
	{
		"id": "javascript-core-71",
		"question": "What is a safe alternative to using eval()?",
		"correct_answer": "window.Function()",
		"incorrect_answers": [
			"window.Check()",
			"window.Evaluate()",
			"window.Search()"
		],
		"source": ""
	},
	{
		"id": "javascript-core-72",
		"question": "You are writing code and need additional information about an object's properties. You determine that the properties you need information on are from a symbol. What is your next step?",
		"correct_answer": "Use the Object.getOwnPropertySymbols() method to return an array of the symbol properties of an object.",
		"incorrect_answers": [
			"Use the Symbol.getProperties() method to return an array of the symbol properties of an object.",
			"Use the Symbol.ObjectProperties() method to return an array of the symbol properties of an object.",
			"Use the Object.getOwnPropertyNames() method to return an array of the symbol properties of an object."
		],
		"source": ""
	},
	{
		"id": "javascript-core-74",
		"question": "What added notation on an object will allow the properties to be defined with keys that match existing variable names?",
		"correct_answer": "Object literal property value shorthand",
		"incorrect_answers": [
			"Hash value shorthand",
			"Class value shorthand",
			"Variable value shorthand"
		],
		"source": ""
	},
	{
		"id": "javascript-core-79",
		"question": "What function property on the RegExp.prototype object allows you to tell if there is any match at all?",
		"correct_answer": "RegExp.test()",
		"incorrect_answers": [
			"RegExp.match()",
			"RegExp.one()",
			"RegExp.first()"
		],
		"source": ""
	}
]