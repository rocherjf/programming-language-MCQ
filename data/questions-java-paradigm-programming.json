[
	{
		"id": "java-pp-1",
		"question": "Consider the following block of code:<div class=\"code\"> <p>class NumberData {</p><p>&nbsp; private final int[] data;</p><p><br></p><p>&nbsp; public NumberData(final int numItems) {</p><p>&nbsp; &nbsp; data = new int[numItems];</p><p>&nbsp; }</p><p><br></p><p>&nbsp; public int[] getData() {&nbsp;</p><p>&nbsp; &nbsp; // IMPLEMENTATION HERE</p><p>&nbsp; }</p><p>}</p><p>public class MyClass {</p><p>&nbsp; public static void main(final String[] args) {</p><p>&nbsp; &nbsp; NumberData data = new NumberData(10);</p><p>&nbsp; &nbsp; // add numbers into data</p><p>&nbsp; &nbsp; int[] newData = data.getData();</p><p>&nbsp; &nbsp; newData[0] = 10;</p><p>&nbsp; }</p><p>}</p></div>What must you add into the getData() method to create a defensive copy of data?",
		"correct_answer": "return Arrays.copyOf(data, data.length);",
		"incorrect_answers": [
			"return new int[];",
			"return data;",
			"return Arrays.copyOf(data);"
		],
		"source": ""
	},
	{
		"id": "java-pp-2",
		"question": "Which type of operations transform into another stream?",
		"correct_answer": "Intermediate operations",
		"incorrect_answers": [
			"Terminal operations",
			"Collectors",
			"Pipelines"
		],
		"source": ""
	},
	{
		"id": "java-pp-3",
		"question": "You have a class named BookType with appropriate getters and setters. The following code contains a list of book types and then selects one of the book types: <div class=\"code\"><p>List&lt;BookType&gt; bookTypes = new ArrayList();</p><p>bookTypes.add(new BookType(&quot;History&quot;));</p><p>bookTypes.add(new BookType(&quot;Classic Literature&quot;));</p><p>bookTypes.add(new BookType(&quot;Biographies&quot;));</p><p>BookType bk = bookTypes.stream() &nbsp;.filter(book -&gt; &quot;History&quot;.equals(book.getName())).findAny();</p> </div>This code does not compile, what change can you make on line 5 for this to work?",
		"correct_answer": "Add an optional at the end, such as <span class=\"codeAnswer\">orElse(null)</span>",
		"incorrect_answers": [
			"Rename book to bk",
			"Change <span class=\"codeAnswer\">findAny()</span> to <span class=\"codeAnswer\">find()</span>",
			"Remove the <span class=\"codeAnswer\">.stream()</span>"
		],
		"source": ""
	},
	{
		"id": "java-pp-4",
		"question": "Which is a valid format for a constructor method reference?",
		"correct_answer": "<div class=\"codeAnswer\">ClassName::new</div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\">ClassName::super()</div>",
			"<div class=\"codeAnswer\">ClassName::this</div>",
			"<div class=\"codeAnswer\">ClassName::super()</div>"
		],
		"source": ""
	},
	{
		"id": "java-pp-5",
		"question": "What does Java's lambda expression allow you to do?",
		"correct_answer": "Treat a function as an argument",
		"incorrect_answers": [
			"Achieve multiple inheritance",
			"Write single-statement anonymous methods",
			"Write single-parameter anonymous methods"
		],
		"source": ""
	},
	{
		"id": "java-pp-6",
		"question": "Which method of the java.util.function.Predicate interface allows you to chain two predicates?",
		"correct_answer": "Predicate<T> and(Predicate<? super T> other)",
		"incorrect_answers": [
			"Predicate<T> negate()",
			"Predicate<T> join(Predicate<? super T> other)",
			"Predicate<T> andThen(Predicate<? super T> other)"
		],
		"source": ""
	},
	{
		"id": "java-pp-7",
		"question": "How does Java pass reference type arguments to methods?",
		"correct_answer": "By value; a reference to the actual object is passed",
		"incorrect_answers": [
			"By reference; an actual copy of the object is passed with each method call",
			"By value; the actual object is passed",
			"By reference; the actual object is passed"
		],
		"source": ""
	},
	{
		"id": "java-pp-8",
		"question": "Consider the following lambda expression, where s is of type String: <div class=\"code\"> s -> s.isEmpty() </div> How would you rewrite this using a method reference?",
		"correct_answer": "<div class=\"codeAnswer\">String::isEmpty</div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\">s -> String::isEmpty()</div>",
			"<div class=\"codeAnswer\">String::isEmpty()</div>",
			"<div class=\"codeAnswer\">s -> String::isEmpty</div>"
		],
		"source": ""
	},
	{
		"id": "java-pp-9",
		"question": "Given the following method definition:<div class=\"code\"><p>public static void someMethod(long arg, int... args) {</p><p>&nbsp; &nbsp; // assume implementation here</p><p>}</p></div> Which is a valid call of this method?",
		"correct_answer": "<div class=\"codeAnswer\">someMethod(1);</div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\">someMethod(new int[]{1,2});</div>",
			"<div class=\"codeAnswer\">someMethod(1, {2,3});</div>",
			"<div class=\"codeAnswer\">someMethod(1L, 2L, 3L);</div>"
		],
		"source": ""
	},
	{
		"id": "java-pp-10",
		"question": "What is it called when you change the value of a variable inside a method and it retains that value after the method has completed?",
		"correct_answer": "Call by reference",
		"incorrect_answers": [
			"Side effect",
			"Immutability",
			"Call by value"
		],
		"source": ""
	},
	{
		"id": "java-pp-11",
		"question": "Why are Java streams described as lazy ?",
		"correct_answer": "Computation on the data source is only performed when the terminal operation starts",
		"incorrect_answers": [
			"When compared to an equivalent, pre-Java 8 implementation, using the streams application programming interface (API) will always result in a lower performance",
			"Using streams in your application will always turn on lazy-loading in any Java Persistence API (JPA) implementation that you use",
			"Computation on the data source is only performed when an intermediate operation starts"
		],
		"source": ""
	},
	{
		"id": "java-pp-12",
		"question": "What is true of terminal stream operations?",
		"correct_answer": "They always return a non-stream value such as a primitive or object type except for those whose return type is void. ",
		"incorrect_answers": [
			"They are lazily loaded.",
			"They may return either a stream or a non-stream value such as a primitive or object type.",
			"They always return a stream as a result."
		],
		"source": ""
	},
	{
		"id": "java-pp-13",
		"question": "You have the following declaration: <div class=\"code\">Predicate isEven = i -&gt; i % 2 == 0;</div> How can you use this declaration to create a predicate isOdd?",
		"correct_answer": "<div class=\"codeAnswer\">Predicate<Integer> isOdd = isEven.negate();</div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\">Predicate<Integer> isOdd = isEven.not();</div>",
			"<div class=\"codeAnswer\">Predicate<Integer> isOdd = Predicate.negate(isEven);</div>",
			"<div class=\"codeAnswer\">Predicate<Integer> isOdd = Predicate.not();</div>"
		],
		"source": ""
	},
	{
		"id": "java-pp-14",
		"question": "What is encapsulation?",
		"correct_answer": "A means of determining the level of accessibility of your code",
		"incorrect_answers": [
			"When a class has the ability to take many different forms",
			"When a class acquires the characteristics of another class",
			"The process of showing only essential attributes and hiding unnecessary details from a user"
		],
		"source": ""
	},
	{
		"id": "java-pp-15",
		"question": "What is true about composition?",
		"correct_answer": "It allows for code reuse, even from a final class.",
		"incorrect_answers": [
			"It can expose a public method from the parent class.",
			"It provides its features at compile time.",
			"It can expose a protected method from the parent class."
		],
		"source": ""
	},
	{
		"id": "java-pp-16",
		"question": "Which method of the java.util.Comparator interface accepts an argument of type java.util.Function?",
		"correct_answer": "comparing",
		"incorrect_answers": [
			"compare",
			"comparingInt",
			"thenComparingInt"
		],
		"source": ""
	},
	{
		"id": "java-pp-17",
		"question": "Consider the following Java interface: <div class=\"code\"><p>interface StringValidator {</p><p>&nbsp; &nbsp; boolean test(String s);</p><p>&nbsp; &nbsp; default boolean initialTest(String s) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return !s.isEmpty();</p><p>&nbsp; &nbsp; }</p><p>}</p></div> Which is true of the StringValidator?",
		"correct_answer": "StringValidator is a functional interface.",
		"incorrect_answers": [
			"Adding an abstract method would make it a functional interface. ",
			"StringValidator has two abstract methods so it is not a valid functional interface.",
			"Annotating it with @FunctionalInterface and removing the default method would convert it to a functional interface. "
		],
		"source": ""
	},
	{
		"id": "java-pp-18",
		"question": "What will the following code snippet print out when executed?<div class=\"code\"><p>public class Parent {</p><p>&nbsp; &nbsp;public static String greet() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return &quot;This is the parent speaking&quot;;</p><p>&nbsp; &nbsp; }</p><p>}</p><p>public class Child extends Parent {</p><p>&nbsp; &nbsp; public static String greet() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return &quot;This is the child speaking&quot;;</p><p>&nbsp; &nbsp; }</p><p>}</p><p>public class Main {</p><p>&nbsp; &nbsp; public static void main(String[] args) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Parent p = new Parent();</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Parent c = new Child();</p><p>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(p.greet());</p><p>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(c.greet());</p><p>&nbsp; &nbsp; }</p><p>}</p></div>",
		"correct_answer": "<p>This is the parent speaking</p><p>This is the parent speaking</p>",
		"incorrect_answers": [
			"<p>This is the parent speaking</p><p>This is the child speaking</p>",
			"<p>This is the child speaking</p><p>This is the child speaking</p>",
			"<p>This is the child speaking</p><p>This is the parent speaking</p>"
		],
		"source": ""
	},
	{
		"id": "java-pp-19",
		"question": "What is true of static variables of a class?",
		"correct_answer": "They are statically bound at compile time.",
		"incorrect_answers": [
			"They are statically bound at run time.",
			"They are dynamically bound at compile time.",
			"They are dynamically bound at run time."
		],
		"source": ""
	},
	{
		"id": "java-pp-20",
		"question": "The following method hashes a char array:<div class=\"code\"><p>private final char[] arrayValues;</p><p>private hashValue = 0;</p><p><br></p><p>public int &nbsp;hashSelectedCode() {</p><p>&nbsp; &nbsp; char[] newArray = arrayValues;</p><p><br></p><p>&nbsp; &nbsp; for(int i = 0; i &lt; arrayValues.length; i++) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; hashValue += hash + arrayValues[i];</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // do any other possible calculations</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; return hashValue;</p><p>}</p></div> This is not thread-safe, however. What can you do to fix this?",
		"correct_answer": "In the hashSelectedCode method, create a copy of hashValue and populate your code in the loop.",
		"incorrect_answers": [
			"Declare hashValue as final.",
			"Enclose the code in the hashSelectedCode method in a lock statement to only allow one thread in at a time.",
			"In the hashSelectedCode method, iterate through newArray instead of arrayValues in the for loop."
		],
		"source": ""
	},
	{
		"id": "java-pp-21",
		"question": "Why is immutability key to the functional programming paradigm?",
		"correct_answer": "It minimizes conflicts among objects.",
		"incorrect_answers": [
			"It encapsulates moving parts.",
			"It provides a centralized way for state to leak out.",
			"It is faster for developers to write functional code if the objects are immutable."
		],
		"source": ""
	},
	{
		"id": "java-pp-22",
		"question": "Which type of operations transform into another stream?",
		"correct_answer": "Intermediate operations",
		"incorrect_answers": [
			"Terminal operations",
			"Pipelines",
			"Collectors"
		],
		"source": ""
	},
	{
		"id": "java-pp-23",
		"question": "What does Java use to achieve runtime polymorphism?",
		"correct_answer": "Overriding",
		"incorrect_answers": [
			"Abstraction",
			"Overloading",
			"Encapsulation"
		],
		"source": ""
	},
	{
		"id": "java-pp-24",
		"question": "Using a function of type java.util.function.BiFunction, which option correctly defines a partial function that takes arguments of type String?",
		"correct_answer": "<div class=\"codeAnswer\"><p>Function partial(BiFunction f, String y) {</p><p>&nbsp;return (x) -&gt; f.apply(x, y);&nbsp;</p><p>}</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>Integer partial(BiFunction f, String y) {&nbsp;</p><p>return f.apply(y);&nbsp;</p><p>}</p></div>",
			"<div class=\"codeAnswer\"><p>Function partial(BiFunction f, String x, String y) {&nbsp;</p><p>return (x) -&gt; f.apply(x, y);&nbsp;</p><p>} </p></div>",
			"<div class=\"codeAnswer\"><p>BiFunction partial(Function f, String y) {&nbsp;</p><p>return (x) -&gt; f.apply(x, y);&nbsp;</p><p>} &nbsp;</p></div>"
		],
		"source": ""
	},
	{
		"id": "java-pp-25",
		"question": "Given the following code:<div class=\"code\"><p>class Book {</p><p>&nbsp; &nbsp; private String title;</p><p>&nbsp; &nbsp; private String author;</p><p><br></p><p>&nbsp; &nbsp; public Book(String title, String author) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; this.title = title;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; this.author = author;</p><p>&nbsp; &nbsp; }</p><p><br></p><p>&nbsp; &nbsp; interface IBookBuilder {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IBookBuilder2 withTitle(String title);</p><p>&nbsp; &nbsp; }</p><p><br></p><p>&nbsp; &nbsp; interface IBookBuilder2 {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Book withAuthor(String author);</p><p>&nbsp; &nbsp; }</p><p><br></p><p>&nbsp; &nbsp; public static IBookBuilder build() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return f1 -&gt; f2 -&gt; new Book(f1, f2);</p><p>&nbsp; &nbsp; }</p><p>}</p></div>Which option builds a Book instance?",
		"correct_answer": "<div class=\"codeAnswer\"><p>Book b = Book</p><p>&nbsp;.build()</p><p>&nbsp;.withTitle(&quot;title&quot;)</p><p>&nbsp;.withAuthor(&quot;author&quot;);</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>Book b = Book</p><p>&nbsp;.withTitle(() -&gt; &quot;title&quot;)</p><p>&nbsp;.withAuthor(()-&gt;&quot;author&quot;)</p><p>&nbsp;.build();</p></div>",
			"<div class=\"codeAnswer\"><p>Book b = Book</p><p>&nbsp;.build()</p><p>&nbsp;.andThen(() -&gt; &quot;title&quot;)</p><p>&nbsp;.andThen(() -&gt; &quot;author&quot;);</p></div>",
			"<div class=\"codeAnswer\"><p>Book b = Book</p><p>&nbsp;.withTitle(&quot;title&quot;)</p><p>&nbsp;.withAuthor(&quot;author&quot;)</p><p>&nbsp;.build();</p></div>"
		],
		"source": ""
	},
	{
		"id": "java-pp-26",
		"question": "Which code block is equivalent to the following reduce method of the java.util.stream.Stream interface?<div class=\"code\">T reduce(T val, BinaryOperator<T> operator)</div>",
		"correct_answer": "<div class=\"codeAnswer\"><p>T result = val;</p><p>for (T element : stream)</p><p>&nbsp; &nbsp; result =operator.apply(result, element);</p><p>return result;</p></div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\"><p>T result = null;</p><p>for (T element : stream)</p><p>&nbsp; &nbsp; result = operator.apply(val, element);</p><p>return result;</p></div>",
			"<div class=\"codeAnswer\"><p>T result = null;</p><p>for (T element : stream)</p><p>&nbsp; &nbsp; result = operator.apply(result, element);</p><p>return result != null ? result : val;</p></div>",
			"<div class=\"codeAnswer\"><p>T result = val;</p><p>for (T element : stream)</p><p>&nbsp; &nbsp; result =operator.apply(element);</p><p>return result;</p></div>"
		],
		"source": ""
	},
	{
		"id": "java-pp-27",
		"question": "Which method of the java.util.function.BiFunction interface allows you to compose functions?",
		"correct_answer": "<div class=\"codeAnswer\">BiFunction<T,U,V> andThen(Function&lt;? super R,? extends V&gt; f)</div>",
		"incorrect_answers": [
			"<div class=\"codeAnswer\">BiFunction<T,U,V> compose(BiFunction&lt;? super R,? extends V&gt; f)</div>",
			"<div class=\"codeAnswer\">BiFunction<T,U,V> andThen(BiFunction&lt;? super R,? extends V&gt; f)</div>",
			"<div class=\"codeAnswer\">BiFunction<T,U,V> and(Function&lt;? super R,? extends V&gt; f)</div>"
		],
		"source": ""
	},
	{
		"id": "java-pp-28",
		"question": "The Student class is defined and its constructor sets the name field. What will happen when you execute the following code snippet?<div class=\"code\"><p>public static void main(String[] args) {</p><p>&nbsp; &nbsp; Student aStudent = new Student(&quot;Student1&quot;);</p><p>&nbsp; &nbsp; clearStudentName(aStudent);</p><p>&nbsp; &nbsp; System.out.println(aStudent.name);</p><p>}</p><p>public static void clearStudentName(Student student) {</p><p>&nbsp; &nbsp; student = new Student(&quot;NO_NAME&quot;);</p><p>}</p></div>",
		"correct_answer": "Student1 will be printed out",
		"incorrect_answers": [
			"NO_NAME will be printed out",
			"A compile-time exception will be thrown because you cannot use reference type arguments in static contexts",
			"A run-time exception will be thrown because you cannot use reference type arguments in static contexts"
		],
		"source": ""
	},
	{
		"id": "java-pp-29",
		"question": "You are working on an application that is making extensive use of polymorphism. A number of your classes use the method overriding feature of Java, together with method hiding. An incorrect version of a static method is being called. Where would you start looking for the problem?",
		"correct_answer": "Look at how that method is being called in your hierarchy (method usage).",
		"incorrect_answers": [
			"Look for wrong usages of extends rather than implements.",
			"Look for wrong usages of implements rather than extends.",
			"Look for misused @Override annotations."
		],
		"source": ""
	},
	{
		"id": "java-pp-30",
		"question": "Consider the following code: <div class=\"code\"><p>class Person {</p><p>&nbsp; &nbsp; private int age;</p><p>&nbsp; &nbsp; // getters and setters</p><p>}</p><p>public class MyClass {</p><p>/**L1*/ &nbsp; &nbsp;public static void multiplyNumbers(Person person) &nbsp;{</p><p>/**L2*/ &nbsp; &nbsp; &nbsp; person.setAge(person.getAge() * 2);</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; public static void main(String[] args) {</p><p>/**L3*/ &nbsp; &nbsp; &nbsp; &nbsp;Person person = new Person();</p><p>/**L4*/ &nbsp; &nbsp; &nbsp; &nbsp;person.setAge(30);</p><p>/**L5*/ &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(&quot;Person age: &quot; + person.getAge());</p><p>/**L6*/ &nbsp; &nbsp; &nbsp; &nbsp;multiplyNumbers(person);</p><p>/**L7*/ &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(&quot;Person age: &quot; + person.getAge());</p><p>&nbsp; &nbsp; }</p><p>}</p></div> What change can you make so this code no longer passes the object reference as a value so it becomes a concrete example of pass-by-value?",
		"correct_answer": "Change the parameter in line 1 to be a primitive type and change lines 2 and 6 accordingly.",
		"incorrect_answers": [
			"Change line 4 to: <span class=\"codeAnswer\">int age = person.setAge(30);</span>",
			"Add a new line of code after line 4 with a variable set to the person's age and update lines 5 and 7 to print out that variable value instead.",
			"Remove the static keyword in line 1."
		],
		"source": ""
	}
]